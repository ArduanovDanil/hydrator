# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2025-03-01 14:55+0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: en_US\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ##
#: guide/en/typecasting.md guide/en/mapping.md
#, no-wrap
msgid "Using attributes"
msgstr ""

#. type: Title #
#: guide/en/mapping.md
#, no-wrap
msgid "Mapping"
msgstr ""

#. type: Plain text
#: guide/en/mapping.md
msgid ""
"In many cases, class attribute names differ from data keys you fill and/or "
"create objects of the class with.  For example, we have a blog post class:"
msgstr ""

#. type: Fenced code block (php)
#: guide/en/mapping.md
#, no-wrap
msgid ""
"final class Post\n"
"{\n"
"    public function __construct(\n"
"        private string $title,\n"
"        private string $body,\n"
"    ) {        \n"
"    }\n"
"\n"
"    public function getTitle(): string\n"
"    {\n"
"        return $this->title;\n"
"    }\n"
"\n"
"    public function getBody(): string\n"
"    {\n"
"        return $this->body;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: guide/en/mapping.md
msgid "But the data you have has differently named keys:"
msgstr ""

#. type: Fenced code block (php)
#: guide/en/mapping.md
#, no-wrap
msgid "$data = ['header' => 'First post', 'text' => 'Hello, world!'];\n"
msgstr ""

#. type: Plain text
#: guide/en/mapping.md
msgid "Hydrator allows you to map data:"
msgstr ""

#. type: Fenced code block (php)
#: guide/en/mapping.md
#, no-wrap
msgid ""
"use Yiisoft\\Hydrator\\Hydrator;\n"
"use Yiisoft\\Hydrator\\ArrayData;\n"
"\n"
"$hydrator = new Hydrator();\n"
"\n"
"$map = ['title' => 'header', 'body' => 'text'];\n"
"$post = $hydrator->create(Post::class, new ArrayData($data, $map));\n"
msgstr ""

#. type: Plain text
#: guide/en/mapping.md
msgid "This way we take `header` key for `title` and `text` key for `body`."
msgstr ""

#. type: Plain text
#: guide/en/mapping.md
msgid "For nested objects mapping you can use `ObjectMap` class:"
msgstr ""

#. type: Fenced code block (php)
#: guide/en/mapping.md
#, no-wrap
msgid ""
"use Yiisoft\\Hydrator\\ArrayData;\n"
"use Yiisoft\\Hydrator\\Hydrator;\n"
"use Yiisoft\\Hydrator\\ObjectMap;\n"
"\n"
"final class Message {\n"
"    public string $subject = '';\n"
"    public ?Body $body = null;\n"
"}\n"
"\n"
"final class Body {\n"
"    public string $text = '';\n"
"    public string $html = '';\n"
"}\n"
"\n"
"$hydrator = new Hydrator();\n"
"\n"
"$data = [\n"
"    'title' => 'Hello, World!',\n"
"    'textBody' => 'Nice to meet you.',\n"
"    'htmlBody' => '<h1>Nice to meet you.</h1>',\n"
"];\n"
"$map = [\n"
"    'subject' => 'title',\n"
"    'body' => new ObjectMap([\n"
"        'text' => 'textBody',\n"
"        'html' => 'htmlBody',    \n"
"    ]), \n"
"];\n"
"$message = $hydrator->create(Message::class, new ArrayData($data, $map));\n"
msgstr ""

#. type: Title ##
#: guide/en/mapping.md
#, no-wrap
msgid "Strict mode"
msgstr ""

#. type: Plain text
#: guide/en/mapping.md
msgid ""
"You can enable strict mode by passing `true` as a third argument of "
"`ArrayData`:"
msgstr ""

#. type: Fenced code block (php)
#: guide/en/mapping.md
#, no-wrap
msgid ""
"use Yiisoft\\Hydrator\\Hydrator;\n"
"use Yiisoft\\Hydrator\\ArrayData;\n"
"\n"
"$hydrator = new Hydrator();\n"
"\n"
"$map = ['title' => 'header', 'body' => 'text'];\n"
"$post = $hydrator->create(Post::class, new ArrayData($data, $map, true));\n"
msgstr ""

#. type: Plain text
#: guide/en/mapping.md
msgid ""
"In this case, keys absent from the map are ignored so everything should be "
"mapped explicitly."
msgstr ""

#. type: Plain text
#: guide/en/mapping.md
msgid ""
"Alternatively to specifying mapping as an array, you can use `Data` "
"attribute to define mapping inline:"
msgstr ""

#. type: Fenced code block (php)
#: guide/en/mapping.md
#, no-wrap
msgid ""
"use \\Yiisoft\\Hydrator\\Attribute\\Parameter\\Data;\n"
"\n"
"final class Person\n"
"{\n"
"    public function __construct(\n"
"        #[Data('first_name')]\n"
"        private string $firstName,\n"
"        #[Data('last_name')]\n"
"        private string $lastName,\n"
"    ) {}\n"
"}\n"
"\n"
"$person = $hydrator->create(Person::class, [\n"
"    'first_name' => 'John',\n"
"    'last_name' => 'Doe',\n"
"]);\n"
msgstr ""

#. type: Plain text
#: guide/en/mapping.md
msgid ""
"To skip hydration of a specific property, use `SkipHydration` attribute:"
msgstr ""

#. type: Fenced code block (php)
#: guide/en/mapping.md
#, no-wrap
msgid ""
"use \\Yiisoft\\Hydrator\\Attribute\\SkipHydration;\n"
"\n"
"class MyClass\n"
"{\n"
"    #[SkipHydration]\n"
"    private $property;\n"
"}\n"
msgstr ""

#. type: Title ##
#: guide/en/mapping.md
#, no-wrap
msgid "Resolving dependencies"
msgstr ""

#. type: Plain text
#: guide/en/mapping.md
msgid ""
"To resolve dependencies by specific ID using DI container, use `Di` "
"attribute:"
msgstr ""

#. type: Fenced code block (php)
#: guide/en/mapping.md
#, no-wrap
msgid ""
"use \\Yiisoft\\Hydrator\\Attribute\\Parameter\\Di;\n"
"\n"
"class MyClass\n"
"{\n"
"    public function __construct(\n"
"        #[Di(id: 'importConnection')]\n"
"        private ConnectionInterface $connection,\n"
"    ) {}\n"
"}\n"
msgstr ""

#. type: Plain text
#: guide/en/mapping.md
msgid ""
"The annotation will instruct hydrator to get `$connection` from DI container "
"by `importConnection` ID."
msgstr ""
